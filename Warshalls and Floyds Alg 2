//Input: n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4
//Output: 3
def findTheCity(n, edges, distanceThreshold):
    inf = float('inf')
    # Step 1: Initialize the distance matrix
    dist = [[inf] * n for _ in range(n)]
    for i in range(n):
        dist[i][i] = 0
    
    # Step 2: Fill in the distance matrix with the given edges
    for u, v, w in edges:
        dist[u][v] = w
        dist[v][u] = w
    
    # Step 3: Apply Floyd-Warshall algorithm
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][j] > dist[i][k] + dist[k][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]
    
    # Step 4: Count reachable cities within the distance threshold
    min_reachable_count = inf
    best_city = -1
    for i in range(n):
        count = sum(1 for j in range(n) if dist[i][j] <= distanceThreshold)
        if count <= min_reachable_count:
            min_reachable_count = count
            best_city = i
    
    return best_city

# Example usage
n = 4
edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]]
distanceThreshold = 4
print(findTheCity(n, edges, distanceThreshold))  # Output: 3
